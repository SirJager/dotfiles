#!/bin/sh

# Author : Ankur Kumar (SirJager)
# Github : @SirJager
# Description: This script fetches bookmarks from different browsers(chromium based)
# and displays it rofi. You can visit, copy to clipboard, ghost type, insert and delete bookmark.
# This will allow user to search, and use bookmarks and give more control, irrespective of the browser you use.
# This is script is very simple. I will also add encrypted sync using gpg and git later.
# There are lots of things can be done to improve, but its just personal script, just gets work done.
# This script is alternate version of my another script bookmark-manager, which manages standalone bookmarks with encrypted sync.

# bookmarks source file
CHROMIUM_BOOKMARKS="$HOME/.config/chromium/Default/Bookmarks"
GOOGLE_CHROME_BOOKMARKS="$HOME/.config/google-chrome/Default/Bookmarks"
BRAVE_BOOKMARKS="$HOME/.config/BraveSoftware/Brave-Browser/Default/Bookmarks"

# important variables
DIRECTORY="$HOME/.local/jager"
STANDALONE_BOOKMARKS="$DIRECTORY/standalone.bookmarks"
ROFI_THEME="$HOME/.local/bin/rofi-dmenu/vertical.rasi"
ROFI_THEME_FOR_INSERT="$HOME/.local/bin/rofi-dmenu/horizontal.rasi"

# change icons or clear to remove
FOLDER_ICON="ðŸ“‚ "
TITLE_ICON="ðŸš©"
URL_ICON="ðŸ”— "

# methods , use flags, keep empty here (or make default to select)
METHOD="select" # valid values: select | insert | remove

# default values
NOTIFY="false"
COPY="false"
VISIT="false"
VISIT="false"
TYPE="false"
TYPE_DELAY_IN_MS="20"
VISIT_IN_BROWSER="$BROWSER"
PROMPT="open in $BROWSER"

# default fetch bookmarks from, remove true to disable
ENABLE_STANDALONE="true" # standalone, browser independent
ENABLE_BRAVE="true"
ENABLE_GOOGLE="true"
ENABLE_CHROMIUM="true"
ENABLE_FIREFOX="false" # not yet implemented

# To send notification to window managers
notify() {
	level="$3"
	[ "$level" = "" ] && level="normal"
	[ "$NOTIFY" = "true" ] && notify-send -u "$level" -t 3000 "$1" "$2"
}

get_bookmarks() {
	[ -z "$1" ] && return 1 # bookmark file
	browser_icon="$2"
	bookmarks=$(
		python3 <<EOF
import json

with open('$1', 'r') as json_file:
    data = json.load(json_file)

def print_bookmark_info(bookmark, folder_names=[]):
    name = bookmark.get('name', '')
    url = bookmark.get('url', '')

    if name or url:
        folder_path = '>'.join(folder_names)
        if folder_path:
            folder_path += ''
        if name:
            if folder_path:
                print(f'${browser_icon}${FOLDER_ICON}folder: {folder_path} $TITLE_ICON title: {name} $URL_ICON url: {url}')
            else:
                print(f'${browser_icon}${TITLE_ICON}title: {name} $URL_ICON url: {url}')
        elif url:
            if folder_path:
                print(f'${browser_icon}${FOLDER_ICON}folder: {folder_path} $URL_ICON url: {url}')
            else:
                print(f'${browser_icon}${URL_ICON}url: {url}')

# process bookmarks recursively
def process_bookmarks(bookmarks, folder_names=[]):
    for item in bookmarks:
        item_type = item.get('type', '')
        if item_type == 'folder':
            folder_name = item.get('name', '')
            process_bookmarks(item.get('children', []), folder_names + [folder_name])
        else:
            print_bookmark_info(item, folder_names)

# processing bookmarks from the root
root_bookmarks = data['roots']['bookmark_bar']['children']
process_bookmarks(root_bookmarks)
EOF
	)
	echo "$bookmarks"
}

bookmark_exists() {
	count=$(cat "$STANDALONE_BOOKMARKS" | grep "$1" | wc -l)
	if [ "$count" -eq 0 ]; then
		return 1 # URL not found
	else
		return 0 # URL exists
	fi
}

is_valid_link() {
	# url_pattern='^(http|https)://([a-zA-Z0-9_-]+\.)+[a-zA-Z]{2,6}(/\S*)?$'
	url_pattern='^(https?://)?([a-zA-Z0-9_-]+\.)+[a-zA-Z]{2,6}(/\S*)?$'
	if echo "$1" | grep -qE "$url_pattern"; then
		return 0
	fi
	return 1
}

save_link() {
	[ "$1" = "" ] && return 1
	if ! is_valid_link "$1"; then
		notify "Not a valid url" "$1" critical
		return 1
	fi

	if bookmark_exists "$1"; then
		notify "Bookmark already exists" "$1" critical
		return 1
	fi

	title=$(curl "$1" | grep -oP '<title>\K[^<]+')
	save_line="${TITLE_ICON}title: $title ${URL_ICON}url: $1"

	echo "$save_line" >>"$STANDALONE_BOOKMARKS"
	notify "Bookmak saved added" "$title\n$1"
}

remove_link() {
	[ -z "$1" ] && return 1
	if ! bookmark_exists "$1"; then
		notify "Link does not exists" "$1" critical
		return 1
	fi
	awk -v link="$1" '$0 != link' "$STANDALONE_BOOKMARKS" >"$STANDALONE_BOOKMARKS.tmp" && mv "$STANDALONE_BOOKMARKS.tmp" "$STANDALONE_BOOKMARKS"
	notify "Bookmark deleted" "$1"
}

# applying all flags and values
while [ $# -gt 0 ]; do
	case "$1" in
	--select)
		METHOD="select"
		shift
		;;
	--insert)
		METHOD="insert"
		shift
		;;
	--remove)
		METHOD="remove"
		shift
		;;
	--notify)
		NOTIFY="true"
		shift
		;;
	--standalone)
		ENABLE_STANDALONE="true"
		shift
		;;
	--brave)
		ENABLE_BRAVE="true"
		shift
		;;
	--google)
		ENABLE_GOOGLE="true"
		shift
		;;
	--firefox)
		ENABLE_FIREFOX="true"
		shift
		;;
	--chromium)
		ENABLE_CHROMIUM="true"
		shift
		;;
	--copy)
		COPY="true"
		shift
		;;
	--type)
		TYPE="true"
		shift
		;;
	--visit)
		VISIT="true"
		shift
		;;
	--prompt=*)
		PROMPT="${1#*=}"
		shift
		;;
	--notify=*)
		NOTIFY="${1#*=}"
		shift
		;;
	--standalone=*)
		ENABLE_STANDALONE="${1#*=}"
		shift
		;;
	--copy=*)
		COPY="${1#*=}"
		shift
		;;
	--visit=*)
		VISIT="${1#*=}"
		shift
		;;
	--visit-in=*)
		VISIT_IN_BROWSER="${1#*=}"
		shift
		;;
	--type=*)
		TYPE="${1#*=}"
		shift
		;;
	--type-delay=*)
		TYPE_DELAY_IN_MS="${1#*=}"
		[ "$TYPE_DELAY_IN_MS" = "" ] && TYPE_DELAY_IN_MS="20"
		shift
		;;
	--bro=*)
		browsers="${1#*=}"
		for browser in $browsers; do
			case "$browser" in
			brave)
				ENABLE_BRAVE="true"
				;;
			firefox)
				ENABLE_FIREFOX="true"
				;;
			standalone)
				ENABLE_STANDALONE="true"
				;;
			google)
				ENABLE_GOOGLE="true"
				;;
			chromium)
				ENABLE_CHROMIUM="true"
				;;
			esac
		done
		shift
		;;
	*)
		shift
		;;
	esac
done

if [ "$METHOD" = "select" ]; then
	ALL_BOOKMARKS=""
	if [ "$ENABLE_STANDALONE" = "true" ]; then
		if [ -f "$STANDALONE_BOOKMARKS" ]; then
			ALL_BOOKMARKS="${ALL_BOOKMARKS}$(cat "$STANDALONE_BOOKMARKS")"
		fi
	fi

	if [ "$ENABLE_BRAVE" = "true" ]; then
		if [ -f "$BRAVE_BOOKMARKS" ]; then
			result=$(get_bookmarks "$BRAVE_BOOKMARKS" "brave: ")
			ALL_BOOKMARKS="${ALL_BOOKMARKS}\n${result}"
		fi
	fi

	if [ "$ENABLE_GOOGLE" = "true" ]; then
		if [ -f "$GOOGLE_CHROME_BOOKMARKS" ]; then
			result=$(get_bookmarks "$GOOGLE_CHROME_BOOKMARKS" "google: ")
			ALL_BOOKMARKS="${result}\n${ALL_BOOKMARKS}"
		fi
	fi

	if [ "$ENABLE_CHROMIUM" = "true" ]; then
		if [ -f "$CHROMIUM_BOOKMARKS" ]; then
			result=$(get_bookmarks "$CHROMIUM_BOOKMARKS" "chromium: ")
			ALL_BOOKMARKS="${result}\n${ALL_BOOKMARKS}"
		fi
	fi

	SELECTED_LINE=$(echo "$ALL_BOOKMARKS" | rofi -dmenu -p "$PROMPT" -theme "$ROFI_THEME")
	echo "$SELECTED_LINE"

	# exit if nothing selected
	[ -z "$SELECTED_LINE" ] && exit 0

	SELECTED_LINK=$(echo "$SELECTED_LINE" | awk -F'http' '{print "http"$2}')
	echo "$SELECTED_LINK"

	[ "$COPY" = "true" ] && echo "$SELECTED_LINK" | xclip -selection clipboard
	# [ "$COPY" = "true" ] && notify "COPIED TO CLIPBOARD" "$SELECTED_LINK"

	[ "$TYPE" = "true" ] && xdotool type --clearmodifiers --delay "$TYPE_DELAY_IN_MS" "$SELECTED_LINK"

	[ "$VISIT" = "true" ] && notify "$PROMPT" "$SELECTED_LINK"
	[ "$VISIT" = "true" ] && "$VISIT_IN_BROWSER" "$SELECTED_LINK"
	exit 0
fi

if [ "$METHOD" = "insert" ]; then
	prompt_insert="Insert bookmark: "
	INSERT_LINK="$(xclip -o)"
	if [ -z "$INSERT_LINK" ]; then
		INSERT_LINK=$(rofi -dmenu -p "$prompt_insert" -theme "$ROFI_THEME_FOR_INSERT")
	elif ! is_valid_link "$INSERT_LINK"; then
		INSERT_LINK=$(rofi -dmenu -p "$prompt_insert" -theme "$ROFI_THEME_FOR_INSERT")
	fi
	save_link "$INSERT_LINK"
	exit 0
fi

if [ "$METHOD" = "remove" ]; then
	prompt_delete="Remove bookmark: "
	count=$(cat "$STANDALONE_BOOKMARKS" | wc -l)
	[ "$count" -eq 0 ] && notify "No bookmarks found" "$STANDALONE_BOOKMARKS is empty" && exit 0
	REMOVE_LINE="$(cat "$STANDALONE_BOOKMARKS" | rofi -dmenu -p "$prompt_delete" -theme "$ROFI_THEME")"
	[ "$REMOVE_LINE" = "" ] && exit 0
	remove_link "$REMOVE_LINE"
	exit 0
fi
